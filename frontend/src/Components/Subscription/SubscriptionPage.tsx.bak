import React, { useState, useEffect, useRef } from 'react';
import * as SubscriptionService from '../../services/SubscriptionService';
import './SubscriptionPage.scss';
import { toast } from 'react-toastify';
import { QRCodeSVG } from 'qrcode.react';

interface Plan {
  _id: string;
  name: string;
  type: string;
  price: number;
  discountPercentage: number;
  features: string[];
  popular: boolean;
}

interface Subscription {
  _id: string;
  status: 'active' | 'expired' | 'pending' | 'trial';
  plan: Plan;
  startDate: string;
  endDate: string;
  userId: string;
  trialEndsAt?: string;
  trialDaysRemaining?: number;
}

interface PaymentModalProps {
  isOpen: boolean;
  onClose: () => void;
  plan: Plan;
  onPaymentComplete: () => void;
  isTrialActive: boolean;
  trialDaysRemaining: number;
}

// UPI Reference validation function
export function validateUPIReference(refNumber: string) {
  // Trim and normalize the input
  const ref = refNumber.trim();

  // Case 1: Only digits, 12 to 18 length (most common)
  const digitOnlyPattern = /^\d{12,18}$/;

  // Case 2: Optional bank code prefix (e.g., HDFC, ICICI), followed by digits
  const alphaNumericPattern = /^[A-Z]{3,6}\d{9,15}$/;

  // Case 3: Some UPI IDs include `@` like '324123456789@icici'
  const upiStylePattern = /^\d{6,18}@\w{3,10}$/;

  if (
    digitOnlyPattern.test(ref) ||
    alphaNumericPattern.test(ref) ||
    upiStylePattern.test(ref)
  ) {
    return {
      isValid: true,
      message: "Valid UPI Reference/UTR Number.",
    };
  }

  return {
    isValid: false,
    message: "Invalid UPI Reference/UTR format.",
  };
}

// UPI Payment Modal Component
const PaymentModal: React.FC<PaymentModalProps> = ({ isOpen, onClose, plan, onPaymentComplete, isTrialActive, trialDaysRemaining }) => {
  const [transactionId, setTransactionId] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [upiOrderId, setUpiOrderId] = useState('');
  const [paymentStep, setPaymentStep] = useState<'creating' | 'ready' | 'verifying' | 'pending' | 'complete'>('creating');
  const requestInProgressRef = useRef(false);
  const hasInitializedRef = useRef(false);
  const [verificationStatus, setVerificationStatus] = useState<string | null>(null);
  const [statusCheckInterval, setStatusCheckInterval] = useState<number | null>(null);
  const [submittedTransactionId, setSubmittedTransactionId] = useState<string | null>(null);
  const [validationError, setValidationError] = useState<string | null>(null);
  const [trialDaysAddedMessage, setTrialDaysAddedMessage] = useState<string | null>(null);

  // Generate a unique order ID only once when the modal opens
  useEffect(() => {
    if (isOpen && !hasInitializedRef.current) {
      const orderId = `ORD_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
      setUpiOrderId(orderId);
      hasInitializedRef.current = true;
    }
    
    // Cleanup when modal closes
    if (!isOpen) {
      hasInitializedRef.current = false;
      // Clear any status check intervals
      if (statusCheckInterval) {
        clearInterval(statusCheckInterval);
        setStatusCheckInterval(null);
      }
      // Clear submitted transaction ID
      setSubmittedTransactionId(null);
    }

    // Cleanup function to clear interval when component unmounts
    return () => {
      if (statusCheckInterval) {
        clearInterval(statusCheckInterval);
      }
    };
  }, [isOpen, statusCheckInterval]);

  // Handle authentication state changes
  useEffect(() => {
    // Check if user is still logged in periodically
    const checkAuthInterval = setInterval(() => {
      const token = localStorage.getItem('token');
      if (!token && statusCheckInterval) {
        // If token is gone (user logged out) but interval is still running, clear it
        clearInterval(statusCheckInterval);
        setStatusCheckInterval(null);
      }
    }, 30000); // Check every 30 seconds

    return () => {
      clearInterval(checkAuthInterval);
    };
  }, [statusCheckInterval]);
  
  // Create pending subscription in backend after we have an order ID
  useEffect(() => {
    if (!upiOrderId || requestInProgressRef.current) return;
    
    const createPendingSubscription = async () => {
      // Set flag to prevent duplicate requests
      requestInProgressRef.current = true;
      
      try {
        setPaymentStep('creating');
        console.log('Creating pending subscription with order ID:', upiOrderId);
        const response = await SubscriptionService.createPendingSubscription(plan._id, upiOrderId);
        
        // Check if we have trial days or previous subscription days added
        if (response.data?.data?.trialDaysAdded > 0 || response.data?.data?.previousSubscriptionDaysAdded > 0) {
          let message = '';
          
          if (response.data?.data?.trialDaysAdded > 0) {
            message += `${response.data.data.trialDaysAdded} days from your free trial`;
          }
          
          if (response.data?.data?.previousSubscriptionDaysAdded > 0) {
            if (message) message += ' and ';
            message += `${response.data.data.previousSubscriptionDaysAdded} days from your previous subscription`;
          }
          
          if (message) {
            message = `Your subscription will include ${message}, for a total of ${response.data.data.totalDays} days.`;
            setTrialDaysAddedMessage(message);
          }
        }
        
        setPaymentStep('ready');
      } catch (error) {
        console.error('Error creating pending subscription:', error);
        toast.error('Failed to initialize payment. Please try again.');
        onClose();
      } finally {
        requestInProgressRef.current = false;
      }
    };
    
    createPendingSubscription();
    
    // Cleanup function
    return () => {
      requestInProgressRef.current = false;
    };
  }, [upiOrderId, plan._id, onClose]);
  
  if (!isOpen) return null;
  
  // Generate UPI link for the plan
  const generateUpiLink = (amount: number, planName: string, orderId: string) => {
    // Replace with your actual UPI ID
    const upiId = "patentsbrowser@ybl";
    const merchantName = "PatentsBrowser";
    const planLabel = `${planName}_${orderId}`;
    
    return `upi://pay?pa=${upiId}&pn=${encodeURIComponent(merchantName)}&tn=${encodeURIComponent(planLabel)}&am=${amount}&cu=INR`;
  };
  
  const upiLink = generateUpiLink(plan.price, plan.name, upiOrderId);
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const trimmedId = transactionId.trim();
    if (!trimmedId) {
      toast.error('Please enter your UPI Transaction ID');
      return;
    }

    // Validate the transaction ID using our regex patterns
    const validation = validateUPIReference(trimmedId);
    if (!validation.isValid) {
      setValidationError(validation.message);
      toast.error(validation.message);
      return;
    }
    
    setIsSubmitting(true);
    setPaymentStep('verifying');
    
    try {
      const result = await SubscriptionService.verifyUpiPayment(trimmedId);
      
      if (result.success) {
        // Store the transaction ID for status checks
        setSubmittedTransactionId(trimmedId);
        
        // All payments now require admin verification
        setPaymentStep('pending');
        setVerificationStatus('Your payment reference has been submitted to the admin for verification. This usually takes 10-15 minutes. Until verification is complete, you can continue to use the free trial version.');
        
        // Start polling for status updates
        const intervalId = window.setInterval(async () => {
          // Check if user is still logged in
          const token = localStorage.getItem('token');
          if (!token) {
            clearInterval(intervalId);
            setStatusCheckInterval(null);
            return;
          }

          // Check if transaction ID is still available
          if (!submittedTransactionId) {
            clearInterval(intervalId);
            setStatusCheckInterval(null);
            return;
          }

          try {
            const statusResult = await SubscriptionService.checkPaymentVerificationStatus(submittedTransactionId);
            
            if (statusResult.success) {
              if (statusResult.data.status === 'active') {
                // Payment has been verified by admin
                clearInterval(intervalId);
                setStatusCheckInterval(null);
                setPaymentStep('complete');
                toast.success('Payment verified! Your subscription is now active.');
                setTimeout(() => {
                  if (onPaymentComplete) {
                    onPaymentComplete();
                  }
                  if (onClose) {
                    onClose();
                  }
                }, 2000);
                setTrialDaysAddedMessage(`${trialDaysRemaining} trial days will be added to your subscription`);
              } else if (statusResult.data.status === 'rejected') {
                // Payment has been rejected by admin
                clearInterval(intervalId);
                setStatusCheckInterval(null);
                setVerificationStatus('Your payment was rejected. Please contact support for assistance.');
                toast.error('Payment verification failed. Please contact support.');
                setIsSubmitting(false);
                setPaymentStep('ready');
              }
              // Otherwise keep polling (pending/unverified)
            }
          } catch (error) {
            console.error('Error checking payment status:', error);
            // Don't stop polling on error, just log it
          }
        }, 20000); // Check every 20 seconds
        
        setStatusCheckInterval(intervalId);
      } else {
        toast.error(result.message || 'Payment verification failed. Please try again.');
        setIsSubmitting(false);
        setPaymentStep('ready');
      }
    } catch (error: any) {
      console.error('Error verifying payment:', error);
      
      // Display the specific error message from the backend if available
      const errorMessage = error.response?.data?.message || 
                         'Failed to verify payment. Please try again or contact support.';
      
      toast.error(errorMessage);
      setIsSubmitting(false);
      setPaymentStep('ready');
    }
  };

  // Add a function to handle input change with validation
  const handleTransactionIdChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setTransactionId(value);
    
    // Clear validation error when user starts typing again
    if (validationError) {
      setValidationError(null);
    }
  };

  // Add custom CSS styles for the subscription period message
  const subscriptionMessageStyle = {
    backgroundColor: '#f0f9ff',
    padding: '10px 12px',
    borderRadius: '8px',
    marginTop: '10px',
    border: '1px solid #cce5ff',
    fontSize: '14px',
    fontWeight: 500
  };

  const renderContent = () => {
    if (paymentStep === 'creating') {
      return (
        <div className="creating-payment">
          <div className="spinner"></div>
          <p>Initializing payment...</p>
        </div>
      );
    }
    
    if (paymentStep === 'complete') {
      return (
        <div className="payment-success">
          <div className="success-icon">✓</div>
          <h3>Payment Successful!</h3>
          <p>Your subscription is now active.</p>
          {trialDaysAddedMessage && (
            <div className="trial-days-added" style={subscriptionMessageStyle}>
              <p>{trialDaysAddedMessage}</p>
            </div>
          )}
        </div>
      );
    }

    if (paymentStep === 'pending') {
      return (
        <div className="payment-pending">
          <div className="pending-icon">⏳</div>
          <h3>Verification in Progress</h3>
          <p>{verificationStatus || 'Your payment reference has been submitted to the admin for verification. This usually takes 10-15 minutes.'}</p>
          
          {isTrialActive && trialDaysRemaining > 0 ? (
            <p className="free-trial-notice">
              You can continue to use your free trial until verification is complete. 
              Once verified, your {trialDaysRemaining} trial days will be added to your subscription.
            </p>
          ) : (
            <p className="free-trial-notice">
              You can use the free trial version until verification is complete.
            </p>
          )}
          
          <p className="pending-note">You can close this window. Your subscription will be activated automatically once verified.</p>
        </div>
      );
    }
    
    return (
      <>
        <div className="qr-code-container">
          <div className="qr-code-wrapper">
            <QRCodeSVG value={upiLink} size={180} />
          </div>
          <div className="payment-info">
            <h3>{plan.name} Plan</h3>
            <div className="amount">₹{plan.price.toLocaleString('en-IN')}</div>
            <div className="plan-name">
              {plan.type === 'monthly' ? 'Monthly' : 
                plan.type === 'quarterly' ? 'Quarterly' : 
                plan.type === 'half_yearly' ? 'Half Yearly' : 'Yearly'} Plan
            </div>
            <div className="order-id">Order ID: {upiOrderId}</div>
          </div>
          
          {trialDaysAddedMessage && (
            <div className="subscription-period-message" style={subscriptionMessageStyle}>
              <p>{trialDaysAddedMessage}</p>
            </div>
          )}
        </div>
        
        <div className="